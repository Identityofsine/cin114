name: Test, Build, and Deploy to Production Environment

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  FRONTEND_IMAGE: ghcr.io/identityofsine/cin114
  API_IMAGE: ghcr.io/identityofsine/cin114-api
  TAG: prod

permissions:
  packages: write

jobs:

  test:
    name: Test
    uses: ./.github/workflows/test:frontend.yml

  build-and-push:
    name: Build and Push Docker Images
    permissions:
      packages: write
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Set build environment variables
        run: |
          echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
          echo "BUILD_ID=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_BRANCH=prod" >> $GITHUB_ENV

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build Frontend Docker image
        run: |
          docker build -t ${{ env.FRONTEND_IMAGE }}:${{ env.TAG }} \
            --build-arg BUILD_DATE=${{ env.BUILD_DATE }} \
            --build-arg BUILD_ID=${{ env.BUILD_ID }} \
            --build-arg NEXT_PUBLIC_BRANCH=${{ env.NEXT_PUBLIC_BRANCH }} \
            -f Dockerfile .

      - name: Build API Docker image
        run: |
          docker build -t ${{ env.API_IMAGE }}:${{ env.TAG }} \
            -f backend/Dockerfile ./backend

      - name: Push Frontend Docker image
        run: docker push ${{ env.FRONTEND_IMAGE }}:${{ env.TAG }}

      - name: Push API Docker image
        run: docker push ${{ env.API_IMAGE }}:${{ env.TAG }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
    - name: Checkout
      uses: actions/checkout@v4.2.2

    - name: Install SSH client
      run: |
        sudo apt-get update
        sudo apt-get install -y openssh-client

    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

    - name: Deploy to Production
      run: |
        ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          #!/bin/bash
          set -e  # Exit immediately if a command exits with a non-zero status
          set -x  # Print each command before executing it
          # Set environment variables for deployment
          export NEXT_PUBLIC_BRANCH="prod"
          export NODE_ENV="production"
          export BUILD_DATE="$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
          export BUILD_ID="$(git rev-parse --short HEAD 2>/dev/null || echo 'unknown')"
          # Navigate to the homebrew directory
          cd ~/homebrew || exit 1
          # Run the NEW streamlined deployment script
          ./deploy-new.sh prod
        EOF
